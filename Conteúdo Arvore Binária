Árvore Binária
Uma árvore binária é uma estrutura de dados composta por nós, orientada por uma raiz. Cada nó pode ter no máximo dois filhos, chamados de subárvore esquerda e subárvore direita.

Estrutura de um Nó
Cada nó da árvore é definido por uma estrutura (em C, por exemplo, um struct) que contém três partes principais:

Ponteiro para a esquerda: Aponta para o nó à esquerda, que contém um valor menor que o nó atual. Pode ser NULL se não houver nó à esquerda.
Valor do nó: Contém o valor armazenado no nó (pode ser um número, por exemplo).
Ponteiro para a direita: Aponta para o nó à direita, que contém um valor maior que o nó atual. Pode ser NULL se não houver nó à direita.
Visualmente, a estrutura de um nó seria representada assim:

Ponteiro esquerda	Conteúdo	Ponteiro direita
NULL ou endereço	Valor	NULL ou endereço
Exemplo de Árvore Binária
Abaixo está um exemplo de árvore binária com uma raiz de valor 1000. O nó 500 é menor que a raiz, portanto, fica à esquerda, e o nó 1500 é maior que a raiz, ficando à direita. O nó 1800, maior que 1500, está à direita de 1500:

Copiar código
       1000
      /    \
    500    1500
               \
               1800
Regras de Inserção
Comparação com a raiz: Quando um novo valor é inserido, ele é comparado primeiro com a raiz da árvore.

Se o valor for menor que a raiz, ele será inserido na subárvore esquerda.
Se o valor for maior que a raiz, ele será inserido na subárvore direita.
Comparação subsequente: Após a comparação com a raiz, o novo valor é comparado com o próximo nó da árvore (à esquerda ou à direita, dependendo do valor). Isso continua até encontrar um local adequado para inserção (um nó NULL).

Exemplo de Inserção
Se a raiz for o valor 1000 e desejarmos inserir o valor 1800, o processo será:

1800 é maior que 1000 → Vai para a direita.
1800 é maior que 1500 → Vai para a direita de 1500.
